#include <iostream>
#define MIN(X,Y) (((X)<(Y)) ? (X) : (Y)) //매크로 함수 구성

using namespace std;

struct Logic {
	int** dat; //2차원 배열을 만들어서 주소를 기억시킬 포인터 변수
	int size = 16; //0~f 까지를 사용할 예정이라 16x16 배열로 생성
	int turn = 0; // 0,1,0,1 ~~ 형태로 전개시킬 값

	void MakeData(); // 16x16 크기의 2차원 배열을 heap 메모리에 생성
	void deleteData(); // heap 메모리에 생성시킨 공간 해제
	bool putStone(int, int); // 2차원 배열에서 특정 위치의 값을 '1' 또는 '2'로 변경
	bool check(int, int); // 특정 위치에서 수직, 수평, 우상, 우하 방향으로의 데이터 탐색
	void add(int, int&, int&); //데이터 탐색 시에 탐색 커서의 위치를 이동
};

void Logic::MakeData() {
	//2차원 배열 메모리 공간을 동적 할당
	dat = (int**)malloc(sizeof(int*) * size);
	dat[0] = (int*)malloc(sizeof(int) * size * size);
	for (int i = 1; i < size; i++) dat[i] = dat[i - 1] + size; //포인터 연산
	//모든 공간의 값을 0으로 초기화
	memset(dat[0], 0, sizeof(int) * size * size);
}

void Logic::deleteData() {
	free(dat[0]); // 동적할당된 1차 주소값들을 모두 해제
	free(dat); // 동적할당 된 2차 주소값들을 해제
}

bool Logic::putStone(int r, int c) {
	if (dat[r][c] > 0) return false; //이미 데이터가 있는 상태면 취소

	dat[r][c] = turn + 1; //특정 배열값을 '1 또는 '2'로 수정
	if (check(r, c)) return true;

	turn = 1 - turn; //0->1 또는 1->0으로 변경
	return false;
	//이 함수의 반환값은 true : 게임을 종료시킨다 /false : 게임 계속 진행
}

void Logic::add(int type, int& r, int& c) {
	switch (type) {
	case 0: //수평, 열 증가
		c++; break;
	case 1: //수직, 행 증가
		r++; break;
	case 2: //우하. 행, 열 증가
		r++; c++; break;
	case 3: //우상. 행감소, 열 증가
		r--; c++; break;
	}
}

bool Logic::check(int pr, int pc) { //현재위치
	int cnt = 0, current = 0;
	int r, c;

	//check horizontal
	for (c = 0; c < size; add(0, pr, c)) {
		if (dat[pr][c] == 0 || current != dat[pr][c]) {
			current = dat[pr][c]; cnt = 1;
		}
		else cnt++;
		if (cnt == 5) return true;
	}
	//check vertical
	cnt = 0;
	for (r = 0; r < size; add(1, r, pc)) {
		if (dat[r][pc] == 0 || current != dat[r][pc]) {
			current = dat[r][pc]; cnt = 1;
		}
		else cnt++;
		if (cnt == 5) return true;
	}

	//check right-down
	r = pr - MIN(pr, pc);
	c = pr - MIN(pr, pc);
	cnt = 0;
	for (; r < size && c < size; add(2, r, c)) {
		if (dat[r][c] == 0 || current != dat[r][c]) { current = dat[r][c]; cnt = 1; }
		else cnt++;
		if (cnt == 5) return true;
	}

	//check right-up
	r = pr + MIN(size - 1 - pr, pc);
	c = pc - MIN(size - 1 - pr, pc);
	cnt = 0;
	for (; r >= 0 && c < size; add(3, r, c)) {
		if (dat[r][c] == 0 || current != dat[r][c]) { current = dat[r][c]; cnt = 1; }
		else cnt++;
		if (cnt == 5) return true;
	}
	return false;
}

struct Render {
	int** dat; //데이터가 있는 주소
	int size = 16;

	void setData(int**); // 데이터가 있는 주소를 멤버 변수로 연결
	void printTop(); // 상단의 바둑판 라인 그리기
	void printMid(int); //중간의 바둑판 라인 그리기
	void printBtm(); //하단의 바둑판 라인 그리기
	void printBoard(); //전체 바둑판 그리기
	void printTopPosInfo(); //바둑판 입력을 위한 상단 UI 그리기
	string getString(string, int, int); //특정위치에서 바둑판 선을 그릴지 바둑알을 그릴지 결정
	int getIndex(char); //위치값으로 입력된 문자열을 하나하나 분석해서 2차원 배열의 인덱스를 찾는다.
};

void Render::setData(int** p) {
	dat = p; // 매개인자로 주어진 주소로 멤버 변수인 dat에 연결처리
}

void Render::printBoard() {
	printTopPosInfo(); //상단 UI 그리고
	printTop(); // 상단 바둑판 그리고
	for (int i = 0; i < size - 2; i++) printMid(i + 1); // 중간 바둑판 그리고
	printBtm(); //하단 바둑판 그림
}

void Render::printTop() {
	cout << getString("┌", 0, 0); // (0,0) 데이터를 참조
	//(0, i+1) 데이터 참조
	for (int i = 0; i < size - 2; i++) cout << getString("┬", 0, i + 1);
	cout << getString("┐", 0, 15) << "0" << endl; //(0,15)데이터 참조

}

void Render::printMid(int line) {
	cout << getString("├", line, 0);
	for (int i = 0; i < size - 2; i++) cout << getString("┼", line, i + 1);
	cout << getString("┤", line, 15);

	//오른쪽 UI 출력
	if (line <= 9) cout << line << endl;
	else cout << (char)('a' + line - 10) << endl;
}

void Render::printBtm() {
	cout << getString("└", 15, 0);
	for (int i = 0; i < size - 2; i++) cout << getString("┴", 15, i + 1);
	cout << getString("┘", 15, 15) << "f" << endl;
}

void Render::printTopPosInfo() {
	cout << "0 1 2 3 4 5 6 7 8 9 a b c d e f " << endl;
}

string Render::getString(string str, int r, int c) {
	//임의의 위치 (r,c)에서의 데이터를 확인하고
	//데이터가 '0'이면 주어진 선 문자열, str을 출력시키고
	//데이터가 '1' 또는 '2' 의 값을 가지면 바둑돌을 출력시킨다.
	if (dat[r][c] == 0) return str;
	else if (dat[r][c] == 1) return "●";
	else return "○";
}

int Render::getIndex(char c) {
	//"input Postion : " 에서 입력받은 문자를 Logic 데이터 수정을 위한 배열의 인덱스로 변환시킨다
	if ('0' <= c && c <= '9') return c - '0';
	else return c - 'a' + 10;
}

int main() {
	char pos[10]; //명령을 입력받은 문자열 변수

	Logic lg; // Logic 구조체 변수 생성
	lg.MakeData(); //2차원 배열을 만들어서 멤버 변수 dat을 구성시킨다

	Render rd; //Render 구조체 변수 생성
	rd.setData(lg.dat); //Logic에서 만든 2차원 배열 공간의 주소를 Render 멤버 변수, dat에 연결

	bool bGameOver = false;
	while (1) {
		system("cls"); //콘솔화면 모두 지우기
		rd.printBoard(); //바둑판을 계속 출력
		if (bGameOver) { //게임 종료된 상황이면 반복루프가 빠져나간다
			cout << "Game Over" << endl;
			break;
		}
		cout << "Input Position : ";
		cin >> pos; //위치값을 입력받는다
		if (strcmp(pos, "gg") == 0) break; //중간에 게임을 종료할때 'gg'를 이용하도록 한다

		//입력된 문자열을 분석해서 Logic 쪽에서의 데이터를 변경시키고, 분석하여 결과를 받아둔다
		bGameOver = lg.putStone(rd.getIndex(pos[0]), rd.getIndex(pos[1]));
	}
	lg.deleteData(); //동적할당된 메모리 공간들을 해제시킨다.
}