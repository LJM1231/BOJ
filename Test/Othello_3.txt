#include <iostream>
#include <vector>

using namespace std;

struct Logic {
	int** dat; //2차원 배열을 만들어서 주소를 기억시킬 포인터 변수
	int size = 8; //0~7까지, 8칸으로 구성되어 있어서 8x8 배열로 생성
	int turn = 0; //0,1,0,1 형태로 전개시킬 값
	vector<pair<int, int>> mem; //오델로 규칙에 따라 상태값이 바뀌어야 할 지점의 위치값을 기억시킴

	enum {
		UP=0,
		UR, //1.up-right
		RIGHT, //2 
		DR, //3.down-right
		DOWN, //4.down
		DL, //5.down-left
		LEFT, //6.left
		UL //7.up-left
	};

	void makeData();
	void deleteData();
	void initData();
	bool putStone(int, int);
	bool canStone(int, int);
	bool check(int, int, int);
	bool isBreak(int, int, bool&);
};

void Logic::makeData() {
	//heap 메모리에 공간을 할당
	dat = (int**)malloc(sizeof(int*) * size);
	dat[0] = (int*)malloc(sizeof(int) * size * size);
	for (int i = 1; i < size; i++) dat[i] = dat[i - 1] + size;
	memset(dat[0], 0, sizeof(int) * size * size);

	initData(); //게임 시작을 위한 돌 놓기
}

void Logic::deleteData() {
	//heap 메모리에 할당된 공간을 해제
	free(dat[0]);
	free(dat);
}

void Logic::initData() {
	//게임을 위한 초기 데이터 지정
	//보드 중앙의 돌 4개에 대한 상태값 설정
	dat[3][3] = dat[4][4] = 1;
	dat[3][4] = dat[4][3] = 2;
}

bool Logic::putStone(int r, int c) {
	//이미 돌이 있는 상태에서는 돌을 놓을 수 없음
	if (dat[r][c] > 0) return false;
	//돌을 놓을 수 없는 지점이면 돌을 놓지 못한다
	if (canStone(r, c) == false) return false;
	//돌을 놓을 수 있는 상황이므로, 현재 플레이어에게 해당되는 상태값으로 수정
	dat[r][c] = turn + 1;
	//돌을 정상적으로 놓았기 때문에 '턴'을 상대방에게 넘김
	turn = 1 - turn;
	//게임의 종료 유무를 결정해야 할 변환값인데, 현재 버전에서는 게임의 종료를 확인하고 있지 않다.
	return false;
}

bool Logic::canStone(int r, int c) {
	bool res = false;
	//돌을 놓은 지점에서의 8방향으로 모두 체크를 하여 오델로 규칙에 따른 돌의 상태값의 변화가 생길 지점을 모두 탐색

	if (check(LEFT, r, c)) res = true;
	if (check(UP, r, c)) res = true;
	if (check(RIGHT, r, c)) res = true;
	if (check(DOWN, r, c)) res = true;
	if (check(UR, r, c)) res = true;
	if (check(DR, r, c)) res = true;
	if (check(UL, r, c)) res = true;
	if (check(DL, r, c)) res = true;

	return res; //돌을 놓을 수 있으면 true, 없으면 false
}

bool Logic::isBreak(int r, int c, bool& res) {
	if (dat[r][c] == 0) return true; //empty. check stop
	else if (dat[r][c] == turn + 1) { //same stone
		if (mem.empty() == false) res = true; //vector 값에 데이터가 있으면 돌을 놓을 수 있음
		return true; //check stop
	}
	else mem.push_back(make_pair(r, c)); //different stone, vector 에 데이터를 추가
	
	return false; //check go
}

bool Logic::check(int dir, int pr, int pc) {
	bool res = false;

	switch (dir) {
	case LEFT:
		for (int c = pc - 1; c >= 0; c--) {
			//check stop 이면 break, 돌을 놓을 수 있으면 res값이 true로 수정되어 있음
			if (isBreak(pr, c, res)) break;
		}
		break;

	case RIGHT:
		for (int c = pc + 1; c < size; c++) {
			if (isBreak(pr, c, res)) break;
		}
		break;

	case UP:
		for (int r = pr + 1; r < size; r++) {
			if (isBreak(r, pc, res)) break;
		}
		break;

	case DOWN:
		for (int r = pr - 1; r > 0; r--) {
			if (isBreak(r, pc, res)) break;
		}
		break;

	/*case DR:
		for (int r = pr + 1, c = pc + 1; r < size && c < size; r++, c++) {
			if (isBreak(pr, pc, res)) break;
		}
		break;

	case UR:
		for (int r = pr - 1, c = pc + 1; r >= 0 && c < size; r--, c++) {
			if (isBreak(pr, pc, res)) break;
		}
		break;

	case DL:
		for (int r = pr + 1, c = pc - 1; r < size && c >= 0; r++, c--) {
			if (isBreak(r, c, res)) break;
		}
		break;

	case UL:
		for (int r = pr - 1, c = pc - 1; r >= 0 && c >= 0; r--, c--) {
			if (isBreak(r, c, res)) break;
		}
		break;*/

	case UR:
		for (int r = pr + 1, c = pc + 1; r < size && c < size; r++, c++) {
			if (isBreak(pr, pc, res)) break;
		}
		break;

	case DR:
		for (int r = pr - 1, c = pc + 1; r >= 0 && c < size; r--, c++) {
			if (isBreak(pr, pc, res)) break;
		}
		break;

	case UL:
		for (int r = pr + 1, c = pc - 1; r < size && c >= 0; r++, c--) {
			if (isBreak(r, c, res)) break;
		}
		break;

	case DL:
		for (int r = pr - 1, c = pc - 1; r >= 0 && c >= 0; r--, c--) {
			if (isBreak(r, c, res)) break;
		}
		break;

	}

	if (res) {
		//p : pair<int, int> 타입
		//'isBreak' 함수에서 row를 first로, column을 second로 데이터 추가가 이루어짐
		for (auto p : mem) dat[p.first][p.second] = turn + 1;
	}
	mem.clear();

	return res;
}




struct Render {
	int** dat = NULL; //데이터가 있는 주소
	int size = 8; //2차원 데이터의 크기
	string line[11] = { //board 렌더링을 위한 문자열을 데이터화
		"─", "│",
		"┌", "┬", "┐",
		"├", "┼", "┤",
		"└", "┴", "┘"
	};
	string stone[2] = { "○", "●" }; //stone 렌더링을 위한 문자열도 데이터화


	void setData(int**); //데이터가 있는 주소를 멤버 변수로 연결
	string getString(int, int); //빈 공간으로 할지, stone으로 렌더링 할지 결정
	int getIndex(char);

	void printBoard();
	void printHorz(int, int, int, int);
	void printTopGuide();
};

void Render::setData(int** p) { dat = p; } //데이터 메모리 주소 연결

void Render::printBoard() {
	printTopGuide(); //상단 UI

	printHorz(2, 3, 4, 0); //board 상단
	for (int i = 1; i <= size; i++){ //board 중앙
		printHorz(1,1,1,i); //공백 or 돌을 렌더링
			if(i==size)break;
			printHorz(5, 6, 7, 0); //board 중앙 line을 렌더링
	}
	printHorz(8, 9, 10, 0); //board 하단
}

void Render::printHorz(int L, int M, int R, int S) {
	cout << line[L];
	for (int i = 0; i < size; i++) {
		if (S == 0) cout << line[S];
		else cout << getString(S - 1, i);

		if (i == size - 1) break;
		cout << line[M];
	}

	cout << line[R];
	if (S != 0) cout << S - 1; //우측 UI 렌더링
	cout << endl;
}

string Render::getString(int r, int c) {
	string res = "  "; //기본값은 공백
	if (dat[r][c] != 0) res = stone[dat[r][c] - 1]; //유의미한 데이터가 있을 경우 '돌'로 렌더링
	return res;
}

void Render::printTopGuide() {
	cout << "  0   1   2   3   4   5   6   7" << endl;
}

int Render::getIndex(char c) { //입력 문자 분석. 데이터 input 처리용
	if ('0' <= c && c <= '9') return c - '0';
	else return c - 'a' + 10;
}

int main() {
	char pos[10];

	Logic lg;
	lg.makeData();

	Render rd;
	rd.setData(lg.dat);

	bool bGameOver = false;
	while (1) {
		system("cls");
		rd.printBoard();
		if (bGameOver) {
			cout << "Game Over" << endl;
			break;
		}

		cout << "Input Position: ";
		cin >> pos;
		if (strcmp(pos, "gg") == 0) break;

		bGameOver = lg.putStone(rd.getIndex(pos[0]), rd.getIndex(pos[1]));
	}
	lg.deleteData();

}