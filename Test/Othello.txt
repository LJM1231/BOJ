#include <iostream>
#define MIN(X,Y) (((X)<(Y)) ? (X) : (Y))
using namespace std;

struct Logic {
	int** dat;
	int size = 8;
	int turn = 0;

	void MakeData();
	void deleteData();
	bool putStone(int, int);
	bool check(int, int);
	void add(int, int&, int&);
};

void Logic::MakeData() {
	dat = (int**)malloc(sizeof(int*) * size);
	dat[0] = (int*)malloc(sizeof(int) * size * size);
	for (int i = 1; i < size; i++) dat[i] = dat[i - 1] + size;
	memset(dat[0], 0, sizeof(int) * size * size);

	for (int i = 0; i < size; i++) {
		for (int j = 0; j < size; j++) {
			dat[3][3] = 1;
			dat[4][4] = 1;
			dat[4][3] = 2;
			dat[3][4] = 2;
		}
	}
}

void Logic::deleteData() {
	free(dat[0]);
	free(dat);
}

bool Logic::putStone(int r, int c) {
	if (dat[r][c] > 0) return false;

	dat[r][c] = turn + 1;
	if (check(r, c)) return true;

	turn = 1 - turn;
	return false;
}

void Logic::add(int type, int& r, int& c) {
	switch (type) {
	case 0: //수평, 열 증가
		c++; break;
	case 1: //수직, 행 증가
		r++; break;
	case 2: //우하. 행, 열 증가
		r++; c++; break;
	case 3: //우상. 행감소, 열 증가
		r--; c++; break;
	}
}

bool Logic::check(int pr, int pc) {

}

struct Render {
	int** dat;
	int size = 8;

	void setData(int**);
	void printBoard(); //전체 바둑판 그리기
	void printMid(int); //중간의 바둑판 라인 그리기
	string getString(string, int, int); //특정위치에서 바둑판 선을 그릴지 바둑알을 그릴지 결정
	int getIndex(char);
};

void Render::setData(int** p) {
	dat = p;
}

void Render::printBoard() {
	cout << "  0   1   2   3   4   5   6   7 " << endl;
	
	for (int i = 0; i < size; i++) {
		printMid(i);
	}

	cout << "+---+---+---+---+---+---+---+---+ " << endl;
}

void Render::printMid(int line) {
	cout << "+---+---+---+---+---+---+---+---+ " << endl;
	cout << "| ";
	for (int i = 0; i < size; i++) {
		cout << getString("  | ", line, i);
	}
	cout << line << endl;
}

string Render::getString(string str, int r, int c) {
	if (dat[r][c] == 0) return str;
	else if (dat[r][c] == 1) return "○| ";
	else return "●| ";
}

int Render::getIndex(char c) {
	return c - '0';
}

int main() {
	char pos[10];

	Logic lg;
	lg.MakeData();

	Render rd;
	rd.setData(lg.dat);

	bool bGameOver = false;
	while (1) {
		system("cls");
		rd.printBoard();
		if (bGameOver) {
			cout << "Game Over" << endl;
			break;
		}
		cout << "Input Position : ";
		cin >> pos;
		if (strcmp(pos, "gg") == 0) break;

		bGameOver = lg.putStone(rd.getIndex(pos[0]), rd.getIndex(pos[1]));
	}
	lg.deleteData();
}