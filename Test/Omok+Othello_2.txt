#include <iostream>
#include <vector>
#define MIN(X,Y) (((X)<(Y)) ? (X) : (Y))

using namespace std;

struct Logic {
	int** dat;
	int size = 16;
	int turn = 0;

	vector<pair<int, int>> mem;

	enum {
		UP = 0,
		UR,
		RIGHT,
		DR,
		DOWN,
		DL,
		LEFT,
		UL,
		Omok
	};

	//공통
	void makeData(int);
	void deleteData();
	bool putStone(int, int, int);

	//오목
	void add(int, int&, int&);
	bool check(int, int, int);

	//오셀로
	bool canStone(int, int);
	void initData();
	//bool check(int, int, int);
	bool isBreak(int, int, bool&);
};

void Logic::makeData(int num) {
	//공통
	dat = (int**)malloc(sizeof(int*) * size);
	dat[0] = (int*)malloc(sizeof(int) * size * size);
	for (int i = 1; i < size; i++) dat[i] = dat[i - 1] + size;
	memset(dat[0], 0, sizeof(int) * size * size);

	//오셀로
	if (num == 2) {
		initData();
	}
}

//공통
void Logic::deleteData() {
	free(dat[0]);
	free(dat);
}

//오셀로
void Logic::initData() {
	dat[3][3] = dat[4][4] = 1;
	dat[3][4] = dat[4][3] = 2;
}

bool Logic::putStone(int r, int c, int num) {
	//오목
	if (num == 1) {
		if (dat[r][c] > 0) return false;
		dat[r][c] = turn + 1;
		if (check(Omok, r, c)) return true;
		turn = 1 - turn;
		return false;
	}

	//오셀로
	if (num == 2) {
		if (dat[r][c] > 0) return false;
		if (canStone(r, c) == false) return false;
		dat[r][c] = turn + 1;
		turn = 1 - turn;
		return false;
	}
}

//오목
void Logic::add(int type, int& r, int& c) {
	switch (type) {
	case 0:
		c++; break;
	case 1:
		r++; break;
	case 2:
		r++; c++; break;
	case 3:
		r--; c++; break;
	}
}

//공통
bool Logic::check(int dir, int pr, int pc) {
	int cnt = 0, current = 0;
	int r, c;

	if (dir == Omok) {
		//check horizontal
		for (c = 0; c < size; add(0, pr, c)) {
			if (dat[pr][c] == 0 || current != dat[pr][c]) {
				current = dat[pr][c]; cnt = 1;
			}
			else cnt++;
			if (cnt == 5) {
				return true;
			}
		}
		//check vertical
		cnt = 0;
		for (r = 0; r < size; add(1, r, pc)) {
			if (dat[r][pc] == 0 || current != dat[r][pc]) {
				current = dat[r][pc]; cnt = 1;
			}
			else cnt++;
			if (cnt == 5) {
				return true;
			}
		}

		//check right-down
		r = pr - MIN(pr, pc);
		c = pr - MIN(pr, pc);
		cnt = 0;
		for (; r < size && c < size; add(2, r, c)) {
			if (dat[r][c] == 0 || current != dat[r][c]) { current = dat[r][c]; cnt = 1; }
			else cnt++;
			if (cnt == 5) {
				return true;
			}
		}

		//check right-up
		r = pr + MIN(size - 1 - pr, pc);
		c = pc - MIN(size - 1 - pr, pc);
		cnt = 0;
		for (; r >= 0 && c < size; add(3, r, c)) {
			if (dat[r][c] == 0 || current != dat[r][c]) { current = dat[r][c]; cnt = 1; }
			else cnt++;
			if (cnt == 5) {
				return true;
			}
		}
		return false;
	}

	else {
		bool res = false;
		int size = 8;
		switch (dir) {
		case LEFT:
			for (int c = pc - 1; c >= 0; c--) {
				if (isBreak(pr, c, res)) break;
			}
			break;

		case RIGHT:
			for (int c = pc + 1; c < size; c++) {
				if (isBreak(pr, c, res)) break;
			}
			break;

		case UP:
			for (int r = pr + 1; r < size; r++) {
				if (isBreak(r, pc, res)) break;
			}
			break;

		case DOWN:
			for (int r = pr - 1; r > 0; r--) {
				if (isBreak(r, pc, res)) break;
			}
			break;

		case UR:
			for (int r = pr + 1, c = pc + 1; r < size && c < size; r++, c++) {
				if (isBreak(pr, pc, res)) break;
			}
			break;

		case DR:
			for (int r = pr - 1, c = pc + 1; r >= 0 && c < size; r--, c++) {
				if (isBreak(pr, pc, res)) break;
			}
			break;

		case UL:
			for (int r = pr + 1, c = pc - 1; r < size && c >= 0; r++, c--) {
				if (isBreak(r, c, res)) break;
			}
			break;

		case DL:
			for (int r = pr - 1, c = pc - 1; r >= 0 && c >= 0; r--, c--) {
				if (isBreak(r, c, res)) break;
			}
			break;
		}

		if (res) {
			for (auto p : mem) dat[p.first][p.second] = turn + 1;
		}
		mem.clear();

		return res;
	}
}

//오셀로
bool Logic::canStone(int r, int c) {
	bool res = false;
	int num = 2;
	if (check(LEFT, r, c)) res = true;
	if (check(UP, r, c)) res = true;
	if (check(RIGHT, r, c)) res = true;
	if (check(DOWN, r, c)) res = true;
	if (check(UR, r, c)) res = true;
	if (check(DR, r, c)) res = true;
	if (check(UL, r, c)) res = true;
	if (check(DL, r, c)) res = true;

	return res;
}

//오셀로
bool Logic::isBreak(int r, int c, bool& res) {
	if (dat[r][c] == 0) return true;
	else if (dat[r][c] == turn + 1) {
		if (mem.empty() == false) res = true;
		return true;
	}
	else mem.push_back(make_pair(r, c));

	return false;
}



struct Render {
	int** dat = NULL; //데이터가 있는 주소
	int size = 16;

	string line[11] = {
		"─", "│",
		"┌", "┬", "┐",
		"├", "┼", "┤",
		"└", "┴", "┘"
	};
	string stone[2] = { "○", "●" };

	void setData(int**);
	void printBoard(int);
	void printTopPos(int);
	void printHorz(int, int, int, int, int);
	string getString(int, int, int);
	int getIndex(char);
};

void Render::setData(int** p) {
	dat = p;
}

void Render::printBoard(int num) {
	printTopPos(num);

	if (num == 1) {
		printHorz(2, 3, 4, 0, num);
		for (int i = 1; i <= size; i++) {
			if (i == size - 1) break;
			printHorz(5, 6, 7, i, num);
		}
		printHorz(8, 9, 10, 15, num);
	}

	else if (num == 2) {
		int size = 8;
		printHorz(2, 3, 4, 0, num); //board 상단
		for (int i = 1; i <= size; i++) { //board 중앙
			printHorz(1, 1, 1, i, num); //공백 or 돌을 렌더링
			if (i == size)break;
			printHorz(5, 6, 7, 0, num); //board 중앙 line을 렌더링
		}
		printHorz(8, 9, 10, 0, num); //board 하단
	}
}

void Render::printTopPos(int num) {
	if (num == 1) {
		cout << "0 1 2 3 4 5 6 7 8 9 a b c d e f " << endl;
	}
	else if (num == 2) {
		cout << "  0   1   2   3   4   5   6   7" << endl;
	}
}

void Render::printHorz(int L, int M, int R, int S, int num) {
	if (num==1) {
		cout << line[L];
		for (int i = 1; i < size; i++) {
			cout << getString(M, i, S);

			if (i == size - 2) break;
		}
		cout << line[R];
		if (S <= 9) cout << S << endl;
		else cout << (char)('a' + S - 10) << endl;
	}

	else {
		int size = 8;
		cout << line[L];
		for (int i = 0; i < size; i++) {
			if (S == 0) cout << line[S];
			else cout << getString(0, S - 1, i);

			if (i == size - 1) break;
			cout << line[M];
		}

		cout << line[R];
		if (S != 0) cout << S - 1; //우측 UI 렌더링
		cout << endl;
	}
}

string Render::getString(int i, int r, int c) {
	string res;
	if (i == 0) res = "  ";
	else res = line[i];

	if (dat[r][c] != 0) res = stone[dat[r][c] - 1];
	return res;
}

int Render::getIndex(char c) {
	if ('0' <= c && c <= '9') return c - '0';
	else return c - 'a' + 10;
}




int main() {
	int choice;
	char pos[10];

	cout << "Select Game Mode 1:오목 2:오셀로 ";
	cin >> choice;

	Logic lg;
	lg.makeData(choice);

	Render rd;
	rd.setData(lg.dat);



	bool bGameOver = false;
	while (1) {
		system("cls");
		rd.printBoard(choice);
		if (bGameOver) {
			cout << "Game Over" << endl;
			break;
		}

		cout << "Input Position: ";
		cin >> pos;
		if (strcmp(pos, "gg") == 0) break;

		bGameOver = lg.putStone(rd.getIndex(pos[0]), rd.getIndex(pos[1]), choice);
	}
	lg.deleteData();
}